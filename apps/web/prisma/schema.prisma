generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  password                String
  isActive                Boolean                  @default(true)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  role                    String                   @default("EMPLOYEE")
  customers               Customer[]
  managedEmployees        Employee[]               @relation("EmployeeManager")
  employees               Employee?                @relation("EmployeeUser")
  files                   File[]
  invoices                Invoice[]
  leads                   Lead[]
  leaveRequests           LeaveRequest[]
  messages                Message[]
  notificationPreferences NotificationPreferences?
  notifications           Notification[]
  organizationMembers     OrganizationMember[]
  assignedTasks           ProjectTask[]            @relation("TaskAssignee")
  createdTasks            ProjectTask[]            @relation("TaskCreator")
  projects                Project[]
  timeEntries             TimeEntry[]
  userDevices             UserDevice[]
  profile                 UserProfile?
  workspace_members       workspace_members[]
  workspaces              workspaces[]

  @@map("users")
}

model UserProfile {
  id         String   @id @default(cuid())
  userId     String   @unique
  phone      String?
  department String?
  position   String?
  bio        String?
  timezone   String?  @default("UTC")
  language   String?  @default("en")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Organization {
  id                 String               @id @default(cuid())
  name               String
  domain             String?
  subscriptionPlan   String?              @default("free")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  userRegistration   Boolean?             @default(true)
  emailNotifications Boolean?             @default(true)
  dataBackup         Boolean?             @default(true)
  apiAccess          Boolean?             @default(false)
  customers          Customer[]
  employees          Employee[]
  invoices           Invoice[]
  leads              Lead[]
  members            OrganizationMember[]
  projects           Project[]
  workspaces         workspaces[]

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           String       @default("member")
  joinedAt       DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model Customer {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  email          String?
  phone          String?
  company        String?
  address        String?
  status         String       @default("active")
  source         String?
  assignedToId   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  assignedTo     User?        @relation(fields: [assignedToId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoices       Invoice[]
  leads          Lead[]

  @@map("customers")
}

model Lead {
  id             String       @id @default(cuid())
  organizationId String
  customerId     String?
  source         String?
  status         String       @default("new")
  value          Decimal?     @db.Decimal(10, 2)
  assignedToId   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  company        String?
  email          String?
  name           String
  phone          String?
  assignedTo     User?        @relation(fields: [assignedToId], references: [id])
  customer       Customer?    @relation(fields: [customerId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("leads")
}

model Invoice {
  id             String       @id @default(cuid())
  organizationId String
  customerId     String
  invoiceNumber  String       @unique
  status         String       @default("draft")
  dueDate        DateTime
  createdById    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  amount         Decimal      @db.Decimal(10, 2)
  createdBy      User         @relation(fields: [createdById], references: [id])
  customer       Customer     @relation(fields: [customerId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model Project {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  description    String?
  status         String        @default("planning")
  startDate      DateTime?
  endDate        DateTime?
  budget         Decimal?      @db.Decimal(10, 2)
  managerId      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  tasks          ProjectTask[]
  manager        User?         @relation(fields: [managerId], references: [id])
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  timeEntries    TimeEntry[]

  @@map("projects")
}

model ProjectTask {
  id           String    @id @default(cuid())
  projectId    String
  title        String
  description  String?
  status       String    @default("todo")
  priority     String    @default("medium")
  dueDate      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  assignedToId String?
  createdById  String
  assignedTo   User?     @relation("TaskAssignee", fields: [assignedToId], references: [id])
  createdBy    User      @relation("TaskCreator", fields: [createdById], references: [id])
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_tasks")
}

model TimeEntry {
  id          String    @id @default(cuid())
  userId      String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  duration    Int?
  endTime     DateTime?
  projectId   String?
  startTime   DateTime
  project     Project?  @relation(fields: [projectId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("time_entries")
}

model Employee {
  id             String          @id @default(cuid())
  userId         String          @unique
  organizationId String
  department     String?
  position       String?
  hireDate       DateTime
  salary         Decimal?        @db.Decimal(10, 2)
  employmentType String          @default("full-time")
  managerId      String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  employeeNumber String          @unique
  manager        User?           @relation("EmployeeManager", fields: [managerId], references: [id])
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User            @relation("EmployeeUser", fields: [userId], references: [id], onDelete: Cascade)
  leaveRequests  LeaveRequest[]
  payrollRecords PayrollRecord[]

  @@map("employees")
}

model LeaveRequest {
  id         String   @id @default(cuid())
  employeeId String
  startDate  DateTime
  endDate    DateTime
  reason     String?
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       String
  userId     String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@map("leave_requests")
}

model PayrollRecord {
  id          String   @id @default(cuid())
  employeeId  String
  grossSalary Decimal  @db.Decimal(10, 2)
  deductions  Decimal  @db.Decimal(10, 2)
  netSalary   Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  month       Int
  updatedAt   DateTime @updatedAt
  year        Int
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, month, year])
  @@map("payroll_records")
}

model Message {
  id          String      @id @default(cuid())
  workspaceId String?
  content     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  workspaces  workspaces? @relation(fields: [workspaceId], references: [id])

  @@map("messages")
}

model File {
  id           String      @id @default(cuid())
  workspaceId  String?
  name         String
  uploadedById String
  createdAt    DateTime    @default(now())
  size         Int
  type         String
  updatedAt    DateTime    @updatedAt
  url          String
  uploadedBy   User        @relation(fields: [uploadedById], references: [id])
  workspaces   workspaces? @relation(fields: [workspaceId], references: [id])

  @@map("files")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String    @default("info")
  channel   String    @default("in_app")
  status    String    @default("pending")
  metadata  Json?
  readAt    DateTime?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationPreferences {
  id              String   @id @default(cuid())
  userId          String   @unique
  emailEnabled    Boolean  @default(true)
  pushEnabled     Boolean  @default(true)
  smsEnabled      Boolean  @default(false)
  inAppEnabled    Boolean  @default(true)
  emailTypes      String[] @default(["info", "success", "warning", "error"])
  pushTypes       String[] @default(["info", "success", "warning", "error"])
  smsTypes        String[] @default(["error"])
  quietHoursStart String?
  quietHoursEnd   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model UserDevice {
  id          String   @id @default(cuid())
  userId      String
  deviceToken String
  deviceType  String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceToken])
  @@map("user_devices")
}

model workspace_members {
  id          String     @id
  workspaceId String
  userId      String
  role        String     @default("member")
  joinedAt    DateTime   @default(now())
  users       User       @relation(fields: [userId], references: [id])
  workspaces  workspaces @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
}

model workspaces {
  id                String              @id
  organizationId    String
  name              String
  description       String?
  createdById       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  files             File[]
  messages          Message[]
  workspace_members workspace_members[]
  users             User?               @relation(fields: [createdById], references: [id])
  organizations     Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}
