// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("EMPLOYEE") // SUPER_ADMIN, ADMIN, MANAGER, EMPLOYEE, GUEST
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile            UserProfile?
  organizationMembers OrganizationMember[]
  customers          Customer[]
  leads              Lead[]
  invoices           Invoice[]
  projects           Project[]
  assignedTasks      ProjectTask[] @relation("TaskAssignee")
  createdTasks       ProjectTask[] @relation("TaskCreator")
  timeEntries        TimeEntry[]
  employees          Employee[] @relation("EmployeeUser")
  managedEmployees   Employee[] @relation("EmployeeManager")
  leaveRequests      LeaveRequest[]
  messages           Message[]
  files              File[]
  createdWorkspaces  Workspace[]
  workspaceMembers   WorkspaceMember[]
  notifications      Notification[]
  notificationPreferences NotificationPreferences?
  userDevices        UserDevice[]

  @@map("users")
}

model UserProfile {
  id         String  @id @default(cuid())
  userId     String  @unique
  phone      String?
  department String?
  position   String?
  bio        String?
  timezone   String? @default("UTC")
  language   String? @default("en")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Organization {
  id              String   @id @default(cuid())
  name            String
  domain          String?
  subscriptionPlan String? @default("free") // free, pro, enterprise
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  members         OrganizationMember[]
  customers       Customer[]
  leads           Lead[]
  invoices        Invoice[]
  projects        Project[]
  employees       Employee[]
  workspaces      Workspace[]

  @@map("organizations")
}

model OrganizationMember {
  id             String @id @default(cuid())
  organizationId String
  userId         String
  role           String @default("member") // admin, member
  joinedAt       DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

// CRM Models
model Customer {
  id             String   @id @default(cuid())
  name           String
  email          String?
  phone          String?
  company        String?
  address        String?
  status         String   @default("active") // active, inactive, potential
  source         String?  // website, referral, cold_call, etc.
  assignedToId   String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  assignedTo   User?        @relation(fields: [assignedToId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  leads        Lead[]
  invoices     Invoice[]

  @@map("customers")
}

model Lead {
  id           String   @id @default(cuid())
  name         String
  email        String?
  phone        String?
  company      String?
  source       String?
  status       String   @default("new") // new, contacted, qualified, proposal, closed_won, closed_lost
  value        Decimal? @db.Decimal(10, 2)
  assignedToId String?
  customerId   String?
  organizationId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  assignedTo   User?        @relation(fields: [assignedToId], references: [id])
  customer     Customer?    @relation(fields: [customerId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("leads")
}

// ERP Models
model Invoice {
  id           String   @id @default(cuid())
  invoiceNumber String  @unique
  customerId   String
  amount       Decimal  @db.Decimal(10, 2)
  status       String   @default("draft") // draft, sent, paid, overdue, cancelled
  dueDate      DateTime
  createdById  String
  organizationId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  customer     Customer     @relation(fields: [customerId], references: [id])
  createdBy    User         @relation(fields: [createdById], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

// Project Management Models
model Project {
  id           String   @id @default(cuid())
  name         String
  description  String?
  status       String   @default("planning") // planning, active, on_hold, completed, cancelled
  startDate    DateTime?
  endDate      DateTime?
  budget       Decimal? @db.Decimal(10, 2)
  managerId    String?
  organizationId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  manager      User?        @relation(fields: [managerId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tasks        ProjectTask[]
  timeEntries  TimeEntry[]

  @@map("projects")
}

model ProjectTask {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("todo") // todo, in_progress, review, done
  priority    String   @default("medium") // low, medium, high, urgent
  dueDate     DateTime?
  projectId   String
  assignedToId String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedTo User?   @relation("TaskAssignee", fields: [assignedToId], references: [id])
  createdBy  User    @relation("TaskCreator", fields: [createdById], references: [id])

  @@map("project_tasks")
}

model TimeEntry {
  id        String   @id @default(cuid())
  description String?
  startTime DateTime
  endTime   DateTime?
  duration  Int?     // in minutes
  projectId String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project? @relation(fields: [projectId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@map("time_entries")
}

// HR Models
model Employee {
  id             String   @id @default(cuid())
  userId         String   @unique
  employeeNumber String   @unique
  department     String?
  position       String?
  salary         Decimal? @db.Decimal(10, 2)
  hireDate       DateTime
  employmentType String   @default("full-time")
  managerId      String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user          User           @relation("EmployeeUser", fields: [userId], references: [id], onDelete: Cascade)
  organization  Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  manager       User?          @relation("EmployeeManager", fields: [managerId], references: [id])
  leaveRequests LeaveRequest[]
  payrollRecords PayrollRecord[]

  @@map("employees")
}

model LeaveRequest {
  id         String   @id @default(cuid())
  type       String   // vacation, sick, personal, etc.
  startDate  DateTime
  endDate    DateTime
  reason     String?
  status     String   @default("pending") // pending, approved, rejected
  employeeId String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])

  @@map("leave_requests")
}

model PayrollRecord {
  id         String   @id @default(cuid())
  employeeId String
  month      Int
  year       Int
  grossSalary Decimal @db.Decimal(10, 2)
  deductions Decimal @db.Decimal(10, 2)
  netSalary  Decimal @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, month, year])
  @@map("payroll_records")
}

// Collaboration Models
model Workspace {
  id             String   @id @default(cuid())
  name           String
  description    String?
  organizationId String
  createdById    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy    User?        @relation(fields: [createdById], references: [id])
  members      WorkspaceMember[]
  messages     Message[]
  files        File[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String @id @default(cuid())
  workspaceId String
  userId      String
  role        String @default("member") // admin, member
  joinedAt    DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

model Message {
  id          String   @id @default(cuid())
  content     String
  workspaceId String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  workspace Workspace? @relation(fields: [workspaceId], references: [id])

  @@map("messages")
}

model File {
  id          String   @id @default(cuid())
  name        String
  url         String
  size        Int
  type        String
  workspaceId String?
  uploadedById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  uploadedBy User       @relation(fields: [uploadedById], references: [id])
  workspace  Workspace? @relation(fields: [workspaceId], references: [id])

  @@map("files")
}

// Notification Models
model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   @default("info") // info, success, warning, error, confirm
  channel   String   @default("in_app") // in_app, email, push, sms
  status    String   @default("pending") // pending, sent, delivered, failed, read
  metadata  Json?
  readAt    DateTime?
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationPreferences {
  id                String   @id @default(cuid())
  userId            String   @unique
  emailEnabled      Boolean  @default(true)
  pushEnabled       Boolean  @default(true)
  smsEnabled        Boolean  @default(false)
  inAppEnabled      Boolean  @default(true)
  emailTypes        String[] @default(["info", "success", "warning", "error"])
  pushTypes         String[] @default(["info", "success", "warning", "error"])
  smsTypes          String[] @default(["error"])
  quietHoursStart   String?
  quietHoursEnd     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model UserDevice {
  id          String   @id @default(cuid())
  userId      String
  deviceToken String
  deviceType  String   // ios, android, web
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceToken])
  @@map("user_devices")
}
